module tests.frustum_intersect;

import std.stdio;
import tests.dunit_tests;

import Math = math;
import matrix_4d;
import frustum_intersection;

void testFrustumIntersect() {

    writeln("\nBEGINNING FRUSTUM INTERSECTION\n");

    
    writeln("BEGINNING TEST IS SPHERE IN FRUSTUM ORTHOLINEAR");

    /*
    Matrix4d m = Matrix4d().ortho(-1, 1, -1, 1, -1, 1);
    FrustumIntersection c =  FrustumIntersection(m);
    assertTrue(c.testSphere(1, 0, 0, 0.1));
    assertFalse(c.testSphere(1.2, 0, 0, 0.1));

    writeln("PASSED!");
    writeln("BEGINNING TEST IS SPHERE IN FRUSTUM PERSPECTIVE");
    */

    Matrix4d m = Matrix4d().perspective(cast(float)Math.PI / 2.0f, 1.0f, 0.1f, 100.0f);
    FrustumIntersection c = FrustumIntersection(m);
    assertTrue(c.testSphere(1, 0, -2, 0.1f));
    assertFalse(c.testSphere(4f, 0, -2, 1.0f));

    /*
    writeln("PASSED!");
    writeln("BEGINNING TEST IF AABB IS IN FRUSTUM ORTHOLINEAR");

    m = Matrix4d().ortho(-1, 1, -1, 1, -1, 1);
    c = FrustumIntersection(m);
    assertEquals(FrustumIntersection.INTERSECT, c.intersectAab(-20, -2, 0, 20, 2, 0));
    assertEquals(FrustumIntersection.INSIDE, c.intersectAab(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5));
    assertEquals(Matrix4d.PLANE_PX, c.intersectAab(1.1, 0, 0, 2, 2, 2));
    c.set( Matrix4d().ortho(-1, 1, -1, 1, -1, 1));
    assertEquals(FrustumIntersection.INTERSECT, c.intersectAab(0, 0, 0, 2, 2, 2));
    assertEquals(Matrix4d.PLANE_PX, c.intersectAab(1.1, 0, 0, 2, 2, 2));
    c.set( Matrix4d());
    assertEquals(FrustumIntersection.INTERSECT, c.intersectAab(0.5, 0.5, 0.5, 2, 2, 2));
    assertEquals(Matrix4d.PLANE_PX, c.intersectAab(1.5, 0.5, 0.5, 2, 2, 2));
    assertEquals(Matrix4d.PLANE_NX, c.intersectAab(-2.5, 0.5, 0.5, -1.5, 2, 2));
    assertEquals(Matrix4d.PLANE_NY, c.intersectAab(-0.5, -2.5, 0.5, 1.5, -2, 2));

    writeln("PASSED!");
    writeln("BEGINNING TEST IF AABB IS IN PERSPECTIVE");

    m = Matrix4d().perspective( Math.PI / 2.0, 1.0, 0.1, 100.0);
    c = FrustumIntersection(m);
    assertEquals(FrustumIntersection.INSIDE, c.intersectAab(0, 0, -7, 1, 1, -5));
    assertEquals(FrustumIntersection.PLANE_PX, c.intersectAab(1.1f, 0, 0, 2, 2, 2));
    assertEquals(FrustumIntersection.PLANE_PX, c.intersectAab(4, 4, -3, 5, 5, -5));
    assertEquals(FrustumIntersection.PLANE_NY, c.intersectAab(-6, -6, -2, -1, -4, -4));

    writeln("PASSED!");
    writeln("BEGINNING TEST IS POINT IN PERSPECTIVE");

    m = Matrix4d().perspective( Math.PI / 2.0, 1.0, 0.1, 100.0);
    c = FrustumIntersection(m);
    assertTrue(c.testPoint(0, 0, -5));
    assertFalse(c.testPoint(0, 6, -5));

    writeln("PASSED!");
    writeln("BEGINNING TEST IS AABB IN PERSPECTIVE MASK");

    m = Matrix4d().perspective( Math.PI / 2.0, 1.0, 0.1, 100.0);
    c = FrustumIntersection(m);
    assertEquals(FrustumIntersection.INTERSECT, c.intersectAab(5.1, 0, -3, 8, 2, -2, ~0 ^ FrustumIntersection.PLANE_MASK_PX));
    assertEquals(FrustumIntersection.INTERSECT, c.intersectAab(-6.1, 0, -3, -5, 2, -2, ~0 ^ FrustumIntersection.PLANE_MASK_NX));
    assertEquals(Matrix4d.PLANE_NX, c.intersectAab(-6.1, 0, -3, -5, 2, -2, FrustumIntersection.PLANE_MASK_NX));
    assertEquals(Matrix4d.PLANE_NX, c.intersectAab(-6.1, 0, -3, -5, 2, -2, ~0, Matrix4d.PLANE_NX));

    writeln("PASSED!");
    */
}